{
  "algorithms": [
    {
      "name": "vig_info",
      "help": "Run VIG info sweeps (naive/opt)",
      "discover": [
        "build/algorithms/vig_info/vig_info",
        "build/algorithms/vig_info/Debug/vig_info",
        "build/algorithms/vig_info/Release/vig_info",
        "build/vig_info",
        "build/algorithms/vig_info/vig_info.exe",
        "build/algorithms/vig_info/Debug/vig_info.exe",
        "build/algorithms/vig_info/Release/vig_info.exe",
        "build/vig_info.exe"
      ],
      "cmd_template": [
        "${bin}",
        "-i",
        "${input}",
        "--tau",
        "${tau}",
        "--${impl}",
        "-t",
        "${threads}",
        "--maxbuf",
        "${maxbuf}"
      ],
      "base_params": { "threads": 1 },
      "params": [
        {
          "name": "impl",
          "cli": "--implementations",
          "type": "string",
          "enum": ["naive", "opt"],
          "default": ["naive", "opt"],
          "help": "Comma list of implementations (naive,opt)"
        },
        {
          "name": "tau",
          "cli": "--taus",
          "type": "string",
          "default": ["3", "5", "10", "inf"],
          "allow_inf": true,
          "numeric": "int",
          "min": 2,
          "help": "Comma list of taus (>=2 or inf)"
        },
        {
          "name": "threads",
          "cli": "--threads",
          "type": "int",
          "default": [1, 2, 4],
          "numeric": "int",
          "min": 0,
          "when": { "equals": { "key": "impl", "value": "opt" } },
          "help": "Threads for opt"
        },
        {
          "name": "maxbuf",
          "cli": "--maxbufs",
          "type": "int",
          "default": [50000000, 100000000],
          "numeric": "int",
          "min": 1,
          "when": { "equals": { "key": "impl", "value": "opt" } },
          "help": "Max buffer for opt"
        }
      ],
      "csv": {
        "path": "vig_info_results.csv",
        "header": [
          "file",
          "impl",
          "tau",
          "threads",
          "maxbuf",
          "memlimit_mb",
          "vars",
          "edges",
          "total_sec",
          "parse_sec",
          "vig_build_sec",
          "agg_memory"
        ],
        "required_keys": [
          "vars",
          "edges",
          "total_sec",
          "impl",
          "tau",
          "threads",
          "agg_memory"
        ],
        "key_cols": [0, 1, 2, 3, 4]
      }
    },
    {
      "name": "cnf_info",
      "help": "Run CNF info (basic CNF statistics)",
      "discover": [
        "build/algorithms/cnf_info/cnf_info",
        "build/algorithms/cnf_info/Debug/cnf_info",
        "build/algorithms/cnf_info/Release/cnf_info",
        "build/cnf_info",
        "build/algorithms/cnf_info/cnf_info.exe",
        "build/algorithms/cnf_info/Debug/cnf_info.exe",
        "build/algorithms/cnf_info/Release/cnf_info.exe",
        "build/cnf_info.exe"
      ],
      "cmd_template": [
        "${bin}",
        "-i",
        "${input}",
        "${no_compact_flag}",
        "${no_normalize_flag}"
      ],
      "base_params": {},
      "params": [
        {
          "name": "no_compact_flag",
          "cli": "--compact-flags",
          "type": "string",
          "enum": ["", "--no-compact"],
          "default": ["", "--no-compact"],
          "help": "Values: '' (default compact) or --no-compact (disable compaction)"
        },
        {
          "name": "no_normalize_flag",
          "cli": "--normalize-flags",
          "type": "string",
          "enum": ["", "--no-normalize"],
          "default": ["", "--no-normalize"],
          "help": "Values: '' (default normalize) or --no-normalize (disable normalization)"
        }
      ],
      "csv": {
        "path": "cnf_info_results.csv",
        "header": [
          "file",
          "memlimit_mb",
          "vars",
          "clauses",
          "total_sec",
          "parse_sec",
          "compacted",
          "normalized"
        ],
        "required_keys": [
          "vars",
          "clauses",
          "total_sec",
          "compacted",
          "normalized"
        ],
        "key_cols": [0, 1, 6, 7]
      }
    },
    {
      "name": "segmentation",
      "help": "Run graph segmentation sweeps (naive/opt)",
      "discover": [
        "build/algorithms/segmentation/segmentation",
        "build/algorithms/segmentation/Debug/segmentation",
        "build/algorithms/segmentation/Release/segmentation",
        "build/segmentation",
        "build/algorithms/segmentation/segmentation.exe",
        "build/algorithms/segmentation/Debug/segmentation.exe",
        "build/algorithms/segmentation/Release/segmentation.exe",
        "build/segmentation.exe"
      ],
      "cmd_template": [
        "${bin}",
        "-i",
        "${input}",
        "--tau",
        "${tau}",
        "--k",
        "${k}",
        "--${impl}",
        "-t",
        "${threads}",
        "--maxbuf",
        "${maxbuf}",
        "--size-exp",
        "${size_exp}",
        "${no_mod_guard_flag}",
        "--gamma",
        "${gamma}",
        "${no_anneal_guard_flag}",
        "--dq-tol0",
        "${dq_tol0}",
        "--dq-vscale",
        "${dq_vscale}",
        "--ambiguous",
        "${ambiguous}",
        "--gate-margin",
        "${gate_margin}",
        "--comp-out",
        "${comp_out_dir}",
        "--output-base",
        "${comp_base}"
      ],
      "base_params": { "threads": 1 },
      "params": [
        {
          "name": "impl",
          "cli": "--implementations",
          "type": "string",
          "enum": ["naive", "opt"],
          "default": ["opt"],
          "help": "Comma list of implementations (naive,opt)"
        },
        {
          "name": "size_exp",
          "cli": "--size-exp",
          "type": "float",
          "default": [1.95],
          "numeric": "float",
          "min": 0.0,
          "help": "Exponent for |C| in gate denominator (central default)"
        },
        {
          "name": "tau",
          "cli": "--taus",
          "type": "string",
          "default": ["100"],
          "allow_inf": true,
          "numeric": "int",
          "min": 2,
          "help": "Comma list of taus (>=2 or inf)"
        },
        {
          "name": "k",
          "cli": "--ks",
          "type": "float",
          "default": [50, 300, 800],
          "numeric": "float",
          "min": 0,
          "help": "Comma list of k values"
        },
        {
          "name": "threads",
          "cli": "--threads",
          "type": "int",
          "default": [0],
          "numeric": "int",
          "min": 0,
          "when": { "equals": { "key": "impl", "value": "opt" } },
          "help": "Threads for opt"
        },
        {
          "name": "maxbuf",
          "cli": "--maxbufs",
          "type": "int",
          "default": [50000000],
          "numeric": "int",
          "min": 1,
          "when": { "equals": { "key": "impl", "value": "opt" } },
          "help": "Max buffer for opt"
        },
        {
          "name": "no_mod_guard_flag",
          "map_to": "no_mod_guard_flag",
          "cli": "--mod-guard",
          "type": "string",
          "enum": ["", "--no-mod-guard"],
          "default": [""],
          "help": "Modularity guard: '' (on) or --no-mod-guard (off)"
        },
        {
          "name": "gamma",
          "cli": "--gammas",
          "type": "float",
          "default": [1.0],
          "numeric": "float",
          "min": 0,
          "when": {
            "not": {
              "equals": {
                "key": "no_mod_guard_flag",
                "value": "--no-mod-guard"
              }
            }
          },
          "help": "Modularity resolution gamma"
        },
        {
          "name": "no_anneal_guard_flag",
          "map_to": "no_anneal_guard_flag",
          "cli": "--anneal-guard",
          "type": "string",
          "enum": ["", "--no-anneal-guard"],
          "default": [""],
          "when": {
            "not": {
              "equals": {
                "key": "no_mod_guard_flag",
                "value": "--no-mod-guard"
              }
            }
          },
          "help": "Annealing: '' (on) or --no-anneal-guard (off)"
        },
        {
          "name": "dq_tol0",
          "cli": "--dq-tols",
          "type": "float",
          "default": [0.0005],
          "numeric": "float",
          "min": 0,
          "when": {
            "and": [
              {
                "not": {
                  "equals": {
                    "key": "no_mod_guard_flag",
                    "value": "--no-mod-guard"
                  }
                }
              },
              {
                "not": {
                  "equals": {
                    "key": "no_anneal_guard_flag",
                    "value": "--no-anneal-guard"
                  }
                }
              }
            ]
          },
          "help": "Initial Î”Q tolerance (central default)"
        },
        {
          "name": "dq_vscale",
          "cli": "--dq-vscales",
          "type": "float",
          "default": [0.0],
          "numeric": "float",
          "min": 0,
          "when": {
            "and": [
              {
                "not": {
                  "equals": {
                    "key": "no_mod_guard_flag",
                    "value": "--no-mod-guard"
                  }
                }
              },
              {
                "not": {
                  "equals": {
                    "key": "no_anneal_guard_flag",
                    "value": "--no-anneal-guard"
                  }
                }
              }
            ]
          },
          "help": "Annealing scale (0 => auto)"
        },
        {
          "name": "ambiguous",
          "cli": "--ambiguous-policies",
          "type": "string",
          "enum": ["accept", "reject", "margin"],
          "default": ["margin"],
          "when": {
            "not": {
              "equals": {
                "key": "no_mod_guard_flag",
                "value": "--no-mod-guard"
              }
            }
          },
          "help": "Ambiguous policy"
        },
        {
          "name": "gate_margin",
          "cli": "--gate-margins",
          "type": "float",
          "default": [0.05],
          "numeric": "float",
          "min": 0,
          "when": {
            "and": [
              {
                "not": {
                  "equals": {
                    "key": "no_mod_guard_flag",
                    "value": "--no-mod-guard"
                  }
                }
              },
              { "equals": { "key": "ambiguous", "value": "margin" } }
            ]
          },
          "help": "Gate margin ratio for 'margin' policy (central default)"
        },
        {
          "name": "write_components",
          "cli": "--write-components",
          "type": "string",
          "enum": ["on", "off"],
          "default": ["off"],
          "help": "Whether to emit components CSVs (controls comp-out/output-base auto params)"
        }
      ],
      "auto_params": [
        {
          "name": "comp_out_dir",
          "template": "components/${algo}/tau_${tau}/k_${k}",
          "join_out_dir": true,
          "when": { "equals": { "key": "write_components", "value": "on" } }
        },
        {
          "name": "comp_base",
          "template": "${file_root}",
          "join_out_dir": false,
          "when": { "equals": { "key": "write_components", "value": "on" } }
        }
      ],
      "csv": {
        "path": "segmentation_results.csv",
        "header": [
          "file",
          "impl",
          "tau",
          "k",
          "threads",
          "maxbuf",
          "size_exp",
          "modGuard",
          "gamma",
          "anneal",
          "dqTol0",
          "dqVscale",
          "amb",
          "gateMargin",
          "modGateAcc",
          "modGateRej",
          "modGateAmb",
          "memlimit_mb",
          "vars",
          "clauses",
          "edges",
          "comps",
          "modularity",
          "keff",
          "gini",
          "pmax",
          "entropyJ",
          "total_sec",
          "parse_sec",
          "vig_build_sec",
          "seg_sec",
          "agg_memory"
        ],
        "required_keys": [
          "vars",
          "clauses",
          "edges",
          "comps",
          "modularity",
          "keff",
          "gini",
          "pmax",
          "entropyJ",
          "k",
          "total_sec",
          "impl",
          "threads",
          "agg_memory"
        ],
        "key_cols": [0, 1, 2, 3, 4, 5, 6, 7, 8]
      }
    },
    {
      "name": "louvain",
      "help": "Run Louvain community detection on the VIG",
      "discover": [
        "build/algorithms/louvain/louvain",
        "build/algorithms/louvain/Debug/louvain",
        "build/algorithms/louvain/Release/louvain",
        "build/louvain",
        "build/algorithms/louvain/louvain.exe",
        "build/algorithms/louvain/Debug/louvain.exe",
        "build/algorithms/louvain/Release/louvain.exe",
        "build/louvain.exe"
      ],
      "cmd_template": [
        "${bin}",
        "-i",
        "${input}",
        "--tau",
        "${tau}",
        "--nb-pass",
        "${nb_pass}",
        "--min-mod",
        "${min_mod}",
        "--graph-out",
        "${graph_base}"
      ],
      "base_params": {},
      "params": [
        {
          "name": "tau",
          "cli": "--taus",
          "type": "string",
          "default": ["3", "5", "10", "inf"],
          "allow_inf": true,
          "numeric": "int",
          "min": 2,
          "help": "Comma list of taus (>=2 or inf)"
        },
        {
          "name": "nb_pass",
          "cli": "--nb-pass",
          "type": "int",
          "default": [-1],
          "numeric": "int",
          "help": "Max passes per level (-1 = converge)"
        },
        {
          "name": "min_mod",
          "cli": "--min-mod",
          "type": "float",
          "default": [1e-7],
          "numeric": "float",
          "min": 0,
          "help": "Minimum modularity improvement per pass"
        },
        {
          "name": "write_graph",
          "cli": "--write-graph",
          "type": "string",
          "enum": ["on", "off"],
          "default": ["off"],
          "help": "Emit Louvain graph CSVs (controls --graph-out base)"
        }
      ],
      "auto_params": [
        {
          "name": "graph_base",
          "template": "graphs/${algo}/tau_${tau}/${file_root}",
          "join_out_dir": true,
          "when": { "equals": { "key": "write_graph", "value": "on" } }
        }
      ],
      "csv": {
        "path": "louvain_results.csv",
        "header": [
          "file",
          "tau",
          "nb_pass",
          "min_mod",
          "memlimit_mb",
          "vars",
          "comps",
          "mod0",
          "mod1",
          "improved",
          "total_sec",
          "parse_sec",
          "louvain_graph_sec",
          "louvain_sec"
        ],
        "required_keys": [
          "vars",
          "comps",
          "mod0",
          "mod1",
          "improved",
          "total_sec",
          "tau"
        ],
        "key_cols": [0, 1, 2, 3]
      }
    }
  ]
}
